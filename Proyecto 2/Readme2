Problema:
Darío estaba comiendo unos champiñones cuando de pronto se quedó dormido. Al despertar, se dio cuenta de que ya no se encontraba en la tierra. Estaba en un extraño planeta rodeado de hombrecitos verdes de abundante cabellera y etremidades cortas. El representante de los extraterrestres se acercó a Darío y le explicó la situación. Aparentemente los hombrecillos tenían tecnología lo suficientemente avanzada para conectar planetas por toda la galaxia con portales de traslación instantánea, pero nunca se les había dado bien la matemática discreta (al parecer una pandemia les dificultó el aprendizaje), así que abdujeron a Darío, estudiante de MATCOM para pedirle ayuda.
El problema es el siguiente: Tienen $n$ planetas unidos por $m$ portales. Los portales van en una sola dirección y el costo de combustible espacial de cada uno ($w_i$) es conocido. Se sabe que sólo un portal puede conectar dos planetas. Es posible escoger un conjunto de portales e invertir el sentido de todos al mismo tiempo. El costo de realizar esa acción está dado por el peso máximo entre todas las portales que fueron invertidas. Los extraterrestres quieren encontrar una forma de, a partir de esas inversiones de portales, conseguir que haya un planeta al que sea posible llegar desde cualquier otro planeta. Ayude a Darío a encontrar una forma de conseguir esto, con costo mínimo.

Esto se traduce al siguiente problema:
Se tienen n nodos unidos por m aristas. Las aristas van en una sola dirección y el costo de  cada una se conoce. Solo una arista puede conectar dos nodos. Es posible escoger un conjunto de aristas e invertir el sentido de todas al mismo tiempo y tiene un costo dado por el peso máximo entre todas las aristas que fueron invertidas. Se desea encontrar una forma de, a partir de esas inversiones de aristas, conseguir que haya al menos un nodo al que sea posible llegar desde cualquier otro nodo con costo mínimo.

Solución:
Este problema se resuelve usando búsqueda binaria. Podemos establecer un rango de posibles valores para el costo de inversión, por ejemplo, desde 0 hasta el peso máximo de las aristas. Luego, en cada iteración de la búsqueda binaria, invertimos todas las aristas que tienen un peso menor o igual al valor actual de la búsqueda binaria y verificamos si hay al menos un nodo al que sea posible llegar desde cualquier otro nodo con costo mínimo. Si es así, reducimos el rango de búsqueda a la mitad inferior, de lo contrario, reducimos el rango de búsqueda a la mitad superior.

Primero, se encuentra el peso máximo de las aristas en la lista de aristas. Luego, se realiza una búsqueda binaria en el rango de 0 a ese peso máximo. En cada iteración, se verifica si es posible alcanzar todos los nodos del grafo con un costo menor o igual al valor medio actual de la búsqueda binaria. Si es posible, se reduce el rango superior de la búsqueda binaria, de lo contrario, se aumenta el rango inferior.

Para verificar si es posible alcanzar todos los nodos del grafo con un costo menor o igual al valor medio actual de la búsqueda binaria, se utiliza la función is_reachable. Esta función invierte las aristas que tienen un peso menor o igual al valor medio actual de la búsqueda binaria y crea un grafo dirigido con las aristas invertidas. Luego, se realiza una búsqueda en profundidad (DFS) desde cada nodo del grafo y se verifica si se puede alcanzar todos los nodos del grafo. Si no es posible, se devuelve False, lo que indica que el costo actual no es suficiente para alcanzar todos los nodos del grafo.

La función dfs se utiliza para realizar la búsqueda en profundidad en el grafo dirigido creado por la función is_reachable.

La correctitud del algoritmo se puede demostrar por inducción. Supongamos que el algoritmo encuentra el costo mínimo necesario para que todos los nodos del grafo sean alcanzables desde cualquier otro nodo para un grafo con n nodos y m aristas. Si agregamos una arista adicional al grafo, el costo mínimo necesario para que todos los nodos del grafo sean alcanzables desde cualquier otro nodo no puede ser menor que el costo mínimo necesario para el grafo original. Por lo tanto, el algoritmo sigue siendo válido para el grafo con la arista adicional.
